<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前缀树</title>
      <link href="/posts/84520ef4.html"/>
      <url>/posts/84520ef4.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="ca128278bdfc7a4de2b359b93db87c106f820b3b49055dfe98cead6ad794fb0c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="您好, 这里需要密码.">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 鱼皮的项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/posts/e85d694a.html"/>
      <url>/posts/e85d694a.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="da81a794b18a81ecd27680d486a9c11009679f6c937f51a9d928a0cbe00cd19a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列</title>
      <link href="/posts/8d66b5f2.html"/>
      <url>/posts/8d66b5f2.html</url>
      
        <content type="html"><![CDATA[<h3 id="五、栈与队列">五、栈与队列</h3><p>前提：</p><ol><li>java中 stack 是容器么？</li><li>我们使用的stack是属于哪个版本的STL？</li><li>我们使用的STL中stack是如何实现的？</li><li>stack 提供迭代器来遍历stack空间么？</li></ol><h4 id="1、用栈实现队列">1、用栈实现队列</h4><p>很奇怪的bug，这两几乎一模一样，为什么下面的代码错误？</p><p>第一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(!stack1.isEmpty())&#123;</span><br><span class="line">           stack2.push(stack1.pop());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(!stack2.isEmpty())&#123;</span><br><span class="line">           res=stack2.pop();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span>(!stack2.isEmpty())&#123;</span><br><span class="line">           stack1.push(stack2.pop());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> stack2.isEmpty()&amp;&amp;stack1.isEmpty();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">    whlie(!st1.empty())&#123;</span><br><span class="line">        st2.push(st1.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!st2.empty())&#123;</span><br><span class="line">        result=st2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!st2.empty())&#123;<span class="comment">//直接调用下面的empty()了</span></span><br><span class="line">        st1.push(st2.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(st1.empty()&amp;&amp;st2.empty())<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为，在写了个自己的empty函数在类里面，stack优先调用类里的同名empty（而同名empty要检查栈1和栈2是否同时为空，自然出错），就不会再调用自己的empty了。</p><h4 id="2、用队列实现栈">2、用队列实现栈</h4><p>思路：和栈实现队列不一样，两个栈倒腾，顺序会改变，两个队列倒腾，先进还是先出，顺序没改变</p><p>所以：把除最后一个元素以外的元素弹出后再添加到队列尾部即可。</p><p>bug：下面这两段几乎一模一样，为什么下面的出错了？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue1; <span class="comment">// 和栈中保持一样元素的队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        queue1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        queue1.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123; </span><br><span class="line">        rePosition();</span><br><span class="line">        <span class="keyword">return</span> queue1.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        rePosition();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> queue1.poll();</span><br><span class="line">        queue1.add(result);</span><br><span class="line">        <span class="keyword">return</span> result;      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue1.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rePosition</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue1.size();</span><br><span class="line">        size--;<span class="comment">//看清楚，这里先size--了！</span></span><br><span class="line">        <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)</span><br><span class="line">            queue1.add(queue1.poll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="type">int</span> n=queue1.size();</span><br><span class="line">        <span class="keyword">while</span>(n--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            queue1.add(queue1.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue1.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=queue1.size();</span><br><span class="line">        <span class="keyword">while</span>(n--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            queue1.add(queue1.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> queue1.poll();</span><br><span class="line">        queue1.add(result);</span><br><span class="line">        <span class="keyword">return</span> result;      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为比如压入1和2，队列size为2，如果为n–，会跑两次，会把1添加到2后，然后再把2添加到1后。</p><p>应该为–n&gt;0即可。实际只用跑n-1词，原因参考第二点</p><h4 id="3、对对碰">3、对对碰</h4><p>1、<a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">删除字符串中的所有相邻重复项</a></p><img src="/posts/8d66b5f2/202310292200958.gif" class=""><p>2、<a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">逆波兰表达式求值</a></p><img src="/posts/8d66b5f2/202310292200959.gif" class=""><p>其他技巧：学会用valueOf，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> b=<span class="number">1000</span>;</span><br><span class="line">String s=String.valueOf(b);<span class="comment">//把b转为字符串</span></span><br><span class="line"><span class="type">int</span> b=Integer.valueOf(s);<span class="comment">//把s转为整数</span></span><br></pre></td></tr></table></figure><p>还有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;+&quot;</span>.equals(s)<span class="comment">//快速比较两个字符串是否相等，用charAt(i)还要一个一个串比，很麻烦</span></span><br></pre></td></tr></table></figure><h4 id="4、求解出栈顺序种类">4、求解出栈顺序种类</h4><h5 id="1、递归求解：">1、递归求解：</h5><p>我们把n个元素的出栈个数的记为f(n)，那么对于1、2、3， 我们很容易得出：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f(1) = 1     //即 1</span><br><span class="line"></span><br><span class="line">f(2) = 2     //即 12、21</span><br><span class="line"></span><br><span class="line">f(3) = 5     //即 123、132、213、321、231</span><br></pre></td></tr></table></figure><p>然后我们来考虑<code>f(4),</code> 我们给4个元素编号为a、b、c、d， 那么考虑：元素a只可能出现在1号位置，2号位置，3号位置和4号位置（很容易理解，一共就4个位置，比如abcd，元素a就在1号位置）。</p><p>分析：</p><ol><li><p>如果元素a在1号位置，那么只可能a进栈，马上出栈，此时还剩元素b、c、d等待操作，就是子问题f(3)；</p></li><li><p>如果元素a在2号位置，那么一定有一个元素比a先出栈，即有f(1)种可能顺序（只能是b），还剩c、d，即f(2)，根据乘法原理，一共的顺序个数为f(1) * f(2)；</p></li><li><p>如果元素a在3号位置，那么一定有两个元素比1先出栈，即有f(2)种可能顺序（只能是b、c），还剩d，即f(1)，根据乘法原理，一共的顺序个数为f(2) * f(1)；</p></li><li><p>如果元素a在4号位置，那么一定是a先进栈，最后出栈，那么元素b、c、d的出栈顺序即是此小问题的解，即f(3)；</p></li><li><p>结合所有情况，即<code>f(4) = f(3) + f(2) * f(1) + f(1) * f(2) + f(3);</code></p></li></ol><p>为了规整化，我们定义f(0) = 1；于是f(4)可以重新写为：</p><p><code>f(4) = f(0)*f(3) + f(1)*f(2) + f(2) * f(1) + f(3)*f(0)</code></p><p>然后我们推广到n，推广思路和n=4时完全一样，于是我们可以得到：</p><p><code>f(n) = f(0)*f(n-1) + f(1)*f(n-2) + ... + f(n-1)*f(0)</code></p><p>有了递归式就可以编程求解了。</p><h5 id="2、组合数：">2、组合数：</h5><p>通项公式：</p><img src="/posts/8d66b5f2/202310292200960.png" class="" title="image-20230824104550377"><p>卡塔兰数是一个常见的组合数学问题，它可以用来计算很多问题的可能情况数，比如合法的括号匹配，二叉搜索树的个数，出栈顺序的个数等等。</p><p>卡塔兰数还有一个递推公式是<strong>h(n)=h(0)h(n-1)+h(1)h(n-2)+…+h(n-1)h(0)</strong>，也就是说第n项等于前面n-1项两两相乘的和（也就是上面推导的公式）。</p><p>推导：</p><p>我们可以用一个01字符串来表示出栈顺序，其中0表示入栈，1表示出栈。例如ABCDEF的出栈顺序为CBAEDF，可以表示为001001110110。</p><p>那么对于任意一个合法的出栈顺序，它必须满足以下两个条件：</p><ul><li>0和1的个数相等，因为每次出栈都要对应一个入栈。 2n个位置选n个放0，故有C(2n,n)种选择方法。</li><li>任意一个前缀子串中，0的个数不小于1的个数，因为不能在没有元素入栈的情况下进行出栈。</li></ul><p>然后…问题转化为：求解有多少种这样的01字符串满足这个条件，好难看懂，算了！</p><h4 id="5、滑动窗口最大值">5、<a href="https://leetcode.cn/problems/sliding-window-maximum/">滑动窗口最大值</a></h4><p>考察：根据题目要求实现数据结构的能力</p><p>这里面涉及很多思考，要考虑很多数据结构，下面直接给答案：</p><p>设计单调队列的时候，pop，和push操作要保持如下规则：</p><ol><li>pop(value)：如果窗口移除的元素value等于单调队列的出口元素，那么队列弹出元素，否则不用任何操作</li><li>push(value)：如果push的元素value大于入口元素的数值，那么就将队列入口的元素弹出，直到push元素的数值小于等于队列入口元素的数值为止</li></ol><p>既保证队头到队尾单调递减，又保证队列里都是<strong>有可能成为窗口里最大值的元素</strong>，不需要维护窗口的所有元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)<span class="keyword">return</span> nums;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length-k+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span> [len];</span><br><span class="line">        <span class="type">My_deque</span> <span class="variable">my_deque</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">My_deque</span>();<span class="comment">//调用默认构造</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            my_deque.push(nums[i]);<span class="comment">//初始化队列</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        res[index++] = my_deque.front();<span class="comment">//初始化结果集</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=k;i&lt;nums.length;i++)&#123;</span><br><span class="line">            my_deque.pop(nums[i-k]);<span class="comment">//弹出窗口尾部</span></span><br><span class="line">            my_deque.push(nums[i]);<span class="comment">//插入窗口头部</span></span><br><span class="line">            res[index++] = my_deque.front();<span class="comment">//获取当前滑动窗口最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">My_deque</span>&#123;</span><br><span class="line">        Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">            <span class="comment">// 队列不能为空</span></span><br><span class="line">            <span class="keyword">if</span>(!deque.isEmpty()&amp;&amp;val==deque.peek())&#123;</span><br><span class="line">                deque.poll();<span class="comment">//如果当前要移除的元素等于队首，则弹出队首</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则不用动，因为push的时候已经弹了</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">            <span class="comment">// 要和队尾比较，把队尾小于该元素的都弹出，再入栈就是正确位置</span></span><br><span class="line">            <span class="comment">// 保持队列从队头到队尾单调递减</span></span><br><span class="line">            <span class="comment">// 注意兜底条件：队列不能为空</span></span><br><span class="line">            <span class="keyword">while</span>(!deque.isEmpty()&amp;&amp;val&gt;deque.getLast())&#123;<span class="comment">//等价peekLast()</span></span><br><span class="line">                deque.removeLast();<span class="comment">//把队尾弹出，用pollLast也可以</span></span><br><span class="line">            &#125;</span><br><span class="line">            deque.offer(val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">front</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> deque.peek();<span class="comment">//查询当前滑动窗口最大值，直接返回队首</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：</p><p>Java中有两个Deque实现：<code>ArrayDeque</code>和<code>LinkedList</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Deque&lt;Integer&gt; deque = new LinkedList&lt;&gt;();</span><br><span class="line">ArrayDeque&lt;Integer&gt; deque = new ArrayDeque&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="6、前-K-个高频元素">6、<a href="https://leetcode.cn/problems/top-k-frequent-elements/">前 K 个高频元素</a></h4><p>本题是优先队列的应用</p><h5 id="1、优先队列介绍">1、优先队列介绍</h5><p>Java优先队列默认排序从小到大，底层实现是小根堆</p><p><strong>堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子的值。</strong> 如果父亲结点是大于等于左右孩子就是大顶堆，小于等于左右孩子就是小顶堆。</p><h5 id="2、基本操作">2、基本操作</h5><p>优先队列总是从队头取元素，从队尾添加元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认从小到大排序，小顶堆，先弹小的元素，先弹队头，从队头到队尾递增</span></span><br><span class="line">PriorityQueue&lt;String&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//降序</span></span><br><span class="line">PriorityQueue&lt;String&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(Comparator.reverseOrder());</span><br><span class="line"><span class="comment">//其余操作和队列一样！</span></span><br><span class="line">priorityQueue.offer(<span class="string">&quot;沉默王二&quot;</span>);<span class="comment">//队尾</span></span><br><span class="line">priorityQueue.poll();<span class="comment">//队头</span></span><br></pre></td></tr></table></figure><h5 id="3、基本思路">3、基本思路</h5><h6 id="1、小顶堆">1、小顶堆</h6><p>本题最好使用小顶堆，维护堆大小为K，超过，则把当前最小的元素弹出（也就是堆头）</p><img src="/posts/8d66b5f2/202310292200961.png" class=""><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解法2：基于小顶堆实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] topKFrequent2(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//key为数组元素值,val为对应出现次数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;</span><br><span class="line">        map.put(num,map.getOrDefault(num,<span class="number">0</span>)+<span class="number">1</span>);<span class="comment">//用getOrDefault消除if-else</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在优先队列中存储二元组(num,cnt),cnt表示元素值num在数组中的出现次数</span></span><br><span class="line">    <span class="comment">//出现次数按从队头到队尾的顺序是从小到大排,出现次数最低的在队头(相当于小顶堆)</span></span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((pair1,pair2)-&gt;pair1[<span class="number">1</span>]-pair2[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;<span class="comment">//小顶堆只需要维持k个元素有序</span></span><br><span class="line">        <span class="keyword">if</span>(pq.size()&lt;k)&#123;<span class="comment">//小顶堆元素个数小于k个时直接加</span></span><br><span class="line">            pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//当前元素出现次数大于小顶堆的根结点(这k个元素中出现次数最少的那个)</span></span><br><span class="line">            <span class="keyword">if</span>(entry.getValue()&gt;pq.peek()[<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="comment">//弹出队头(小顶堆的根结点),即把堆里出现次数最少的那个删除,留下的就是出现次数多的了</span></span><br><span class="line">                pq.poll();</span><br><span class="line">                pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=k-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">//依次弹出小顶堆,先弹出的是堆的根,出现次数少,后面弹出的出现次数多</span></span><br><span class="line">        ans[i] = pq.poll()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2、大顶堆">2、大顶堆</h6><p>如果用大顶堆，就不能维护size为K的堆了，因为超过K个元素，把堆头（当前最大元素）弹走，不合理</p><p>只能把所有元素都插入堆中，最后再取前K个元素，空间复杂度较高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解法1：基于大顶堆实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] topKFrequent1(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//key为数组元素值,val为对应出现次数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> num:nums)&#123;</span><br><span class="line">        map.put(num,map.getOrDefault(num,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在优先队列中存储二元组(num,cnt),cnt表示元素值num在数组中的出现次数</span></span><br><span class="line">    <span class="comment">//出现次数按从队头到队尾的顺序是从大到小排,出现次数最多的在队头(相当于大顶堆)</span></span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((pair1, pair2)-&gt;pair2[<span class="number">1</span>]-pair1[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;<span class="comment">//大顶堆需要对所有元素进行排序</span></span><br><span class="line">        pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;<span class="comment">//依次从队头弹出k个,就是出现频率前k高的元素</span></span><br><span class="line">        ans[i] = pq.poll()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何确定排序方式？Java的比较器都是这样判断的：</p><p>按照pair1[1]-pair2[1]的结果进行排序</p><ul><li>如果pair1[1]-pair2[1]的结果为负数，则pair1排在pair2前面；（前一个元素小，排前面，所以是升序）</li><li>如果结果为正数，则pair2排在pair1前面；</li><li>如果结果为0，则pair1和pair2的顺序不变</li></ul><p>而按照pair2[1]-pair1[1]的结果进行排序</p><ul><li>如果pair2[1]-pair1[1]的结果为负数，则pair2排在pair1前面；（后一个元素小，排前面，所以是降序）</li></ul><p>实在不知道就输出一遍！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/posts/fc81fbfd.html"/>
      <url>/posts/fc81fbfd.html</url>
      
        <content type="html"><![CDATA[<h3 id="四、字符串">四、字符串</h3><h4 id="1、反转字符串">1、反转字符串</h4><ol><li><p>解法：双指针</p></li><li><p>不用额外空间的交换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s[l] ^= s[r];  <span class="comment">//构造 a ^ b 的结果，并放在 a 中</span></span><br><span class="line">s[r] ^= s[l];  <span class="comment">//将 a ^ b 这一结果再 ^ b ，存入b中，此时 b = a, a = a ^ b</span></span><br><span class="line">s[l] ^= s[r];  <span class="comment">//a ^ b 的结果再 ^ a ，存入 a 中，此时 b = a, a = b 完成交换</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="2、反转字符串-II">2、<a href="https://leetcode.cn/problems/reverse-string-ii/">反转字符串 II</a></h4><p>固定规律分段处理字符串：</p><ol><li><p>需要按固定规律一段一段处理字符串时，用for循环！</p></li><li><p>拿while循环很难判断终止条件</p></li><li><p>反转字符串，要先把字符串变成StringBuffer或者char数组先。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> []c = s.toCharArray()</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">return</span> str.toString();</span><br></pre></td></tr></table></figure></li></ol><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=s.length();</span><br><span class="line">    <span class="type">char</span> [] c = s.toCharArray(); </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i+=<span class="number">2</span>*k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i+k&lt;=n)reverse(c,i,i+k-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> reverse(c,i,n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、替换空格">3、替换空格</h4><p>数组填充类题目，本题是把空格替换为<code>%20</code>：</p><p>方法一：</p><ul><li>开辟一个新字符串，遇到其他直接复制，遇到空格连接上要替换的字符即可（遍历一次）</li></ul><p>方法二：</p><ul><li><p>双指针（遍历两次，时间换空间）</p></li><li><p>先循环一次，遇到空格，append一次，<strong>将数组扩容到合适的位置</strong></p></li><li><p><strong>第二次循环从后往前</strong>扫描，左指针在扩容前的末尾，右指针在扩容后字符串的末尾。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">        x.append(<span class="string">&quot;  &quot;</span>);<span class="comment">//扩容用string或者StringBuffer都可以，一定要扩容，不然越界！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x.length()==<span class="number">0</span>)<span class="keyword">return</span> s;</span><br><span class="line"><span class="type">int</span> i=s.length()-<span class="number">1</span>;</span><br><span class="line">s+=x.toString();<span class="comment">//扩容到合适的位置</span></span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        StringBuilder x=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                x.append(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x.length()==<span class="number">0</span>)<span class="keyword">return</span> s;</span><br><span class="line">        <span class="type">int</span> i=s.length()-<span class="number">1</span>;</span><br><span class="line">        s+=x.toString();</span><br><span class="line">        <span class="type">char</span> [] c = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> j=s.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c[i]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                c[j--]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                c[j--]=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">                c[j]=<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                c[j]=c[i];</span><br><span class="line">            &#125;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、翻转字符串里的单词">4、翻转字符串里的单词</h4><ol><li><p>方法一：双指针从后往前扫描，用substring切割单词，拼到新串上，空间开销为O（n）</p></li><li><p>方法二：先快慢指针移除空格</p><p>这种局部反转的题，可以考虑先全局反转，再从前往后局部反转，如果所用的语言string是可变长的，那么空间开销为O（1）</p></li></ol><h4 id="5、动态口令">5、<a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">动态口令</a></h4><p>左旋转字符串：</p><ol><li><p>方法一：双指针，从前往后，慢慢把前n个字符串倒腾到最后，空间为O（1）</p></li><li><p>方法二：先全局反转，再反转前len-n个，最后反转最后n个即可。空间为O（1）</p></li><li><p>方法三：创建新串，先拼接上n到len，再拼接上0到n上的字符串，空间为O（n）</p></li><li><p>拼接可以用以下代码，用取余简化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&lt;n+s.length();i++)&#123;</span><br><span class="line"><span class="comment">//String为不可变对象,每轮都要创建新字符串</span></span><br><span class="line"><span class="comment">//res=c</span></span><br><span class="line"><span class="comment">//res=cd</span></span><br><span class="line"><span class="comment">//res=cde</span></span><br><span class="line">str+=s.charAt(i%s.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以上要注意，创建新串不要用string，用char[]或者stringbuilder。</p><p>因为string每次修改，都要创建新的对象，十分浪费时间和空间</p></li></ol><p>完整代码1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseLeftWords</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">char</span> []c = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i&lt;n+s.length();i++)&#123;</span><br><span class="line">            c[k++]=s.charAt(i%s.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码2：效率最高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dynamicPassword</span><span class="params">(String password, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">//这不就是轮转数组吗？</span></span><br><span class="line">        <span class="type">char</span>[] c = password.toCharArray();</span><br><span class="line">        reverse(c,<span class="number">0</span>,target-<span class="number">1</span>);</span><br><span class="line">        reverse(c,target,password.length()-<span class="number">1</span>);</span><br><span class="line">        reverse(c,<span class="number">0</span>,password.length()-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span>[] s,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            s[i]^=s[j];</span><br><span class="line">            s[j]^=s[i];</span><br><span class="line">            s[i]^=s[j];</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="KMP算法初学习：">KMP算法初学习：</h4><ol><li><p>KMP算法负责解决查询子串的问题，原理是记录之前已匹配的信息避免从头开始匹配</p></li><li><p>文本串，模式串的定义：要在文本串中找是否含有模式串。</p></li><li><p>前缀表：记录模式串中从0到i（包括），有多大长度的相同前后缀</p><ol><li>前缀指的是串中以第一个字符开头的连续子串（不包含最后一个字符）</li><li>后缀指的是串中以最后一个字符结尾的连续子串（不包含第一个字符）</li><li>前缀和后缀长度是变化的。</li></ol></li><li><p>如何计算前缀表：</p><ol><li><p>比如aabaaf</p></li><li><p>前缀为a，aa，aab，aaba，aabaa，</p></li><li><p>后缀为f，af，aaf，baaf，abaaf，</p></li><li><p>最长相等前后缀（前缀从前往后，后缀从后往前，二者要完全相等）</p><p>a，0，前缀后缀为空</p><p>aa，1，前缀为a，后缀为a</p><p>aab，0，前缀为a、aa，后缀为b或者ab</p><p>aaba，1，前缀为a、aa、aab，后缀为a、ab，aba，最长相等前后缀为1</p><p>aabaa，2</p><p>aabaaf，0</p></li><li><p>用一个next数组记录前缀表</p></li></ol></li><li><p>如何利用前缀表去进行匹配：</p><ol><li><p>aabaaf和aab aabaaf a两个串</p></li><li><p>前缀表为：a a b a a f</p><p>​   0 1 0 1 2 0</p></li><li><p>j表示模式串，i表示文本串</p></li></ol></li><li><p>next数组求解模板</p><ol><li><p>j是前缀末尾的位置，i是后缀末尾的位置</p></li><li><p>把 [0-j] 的前缀看成是模式串，把 [1-i] 的后缀看成是文本串,文本串每次移动一位</p></li><li><pre><code class="language-java">next[0]=0;//只有一个字符，最长相同前后缀为0int j=0;for(int i=1;i&lt;len;i++)&#123;//i从1开始，才能比较模式串本身    while(j&gt;0&amp;&amp;s[i]!=s[j])//如果j回退到0，那就到底了，不用继续回退    &#123;   //用while的原因，让j回退到上一个匹配（s[i]==s[j]）的点        //只回退一次，可能next[j-1]还在s[i]!=s[j]的点        //不用while，直接回退到0，那就和不用KMP，模式串无脑从头匹配一样了        j=next[j-1];    &#125;    if(s[j]==s[i])&#123;        j++; //更新从0到i最长相等前后缀的长度    &#125;    next[i]=j;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   4. 匹配到不正确的地方，除去不相等之处，模式串的子串跟文本串的子串相等</span><br><span class="line"></span><br><span class="line">      aabaa **f** 和aab aa**b** aaf a，</span><br><span class="line"></span><br><span class="line">      所以模式串子串的最长前缀肯定跟文本串子串的最长后缀有匹配。</span><br><span class="line"></span><br><span class="line">      所以下次模式串匹配，只需要从最长前缀的末尾重新匹配即可（回退到上一个匹配的点）</span><br><span class="line"></span><br><span class="line">      因为模式串子串前缀已经和文本串子串后缀匹配过了。（理解好这个）</span><br><span class="line"></span><br><span class="line">   5. 因为前缀表：记录模式串中从0到i（包括），有多大长度的相同前后缀，所以当不匹配时（当前点最长相同前后缀为0），回退的时候是看上一个点。</span><br><span class="line"></span><br><span class="line">7. 用next数组来做文本串和模式串的匹配和构造next数组一样，只是i从0开始而已。</span><br><span class="line"></span><br><span class="line">8. KMP的时间复杂度分析（摊还分析）：对模式串用了O(m)，对文本串用O（n），共O(n+m)</span><br><span class="line"></span><br><span class="line">   虽然匹配失败时，指针会不断地根据next数组向左回退，看似时间复杂度会很高。但考虑匹配成功时，指针会向右移动一个位置，这一部分对应的时间复杂度为 O(n+m)。又因为向左移动的次数不会超过向右移动的次数，所以总的还是O(n+m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">到此KMP基本内容学习完毕，开始做题</span><br><span class="line"></span><br><span class="line">#### 6、实现 strStr()</span><br><span class="line"></span><br><span class="line">[找出字符串中第一个匹配项的下标](https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/)</span><br><span class="line"></span><br><span class="line">1. 双指针，暴力匹配，每次匹配不上，模式串从头开始。</span><br><span class="line">2. KMP，当`j==len`时，模式串匹配成功，返回`i+1-len`即文本串初次匹配成功子串的起点</span><br><span class="line"></span><br><span class="line">一定要转char数组做！`.charAt`很慢：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int strStr(String haystack, String needle) &#123;</span><br><span class="line">        char []s1=needle.toCharArray();</span><br><span class="line">        int len1 = needle.length();</span><br><span class="line">        int len2 = haystack.length();</span><br><span class="line"></span><br><span class="line">        int [] next=new int [len1];</span><br><span class="line">        int j=0;//前缀的最后一位</span><br><span class="line">        next[0]=0;</span><br><span class="line">        for(int i=1;i&lt;len1;i++)&#123;</span><br><span class="line">            while(j&gt;0&amp;&amp;s1[i]!=s1[j])j=next[j-1];</span><br><span class="line">            if(s1[i]==s1[j])j++;</span><br><span class="line">            next[i]=j;//从1到i的最长相等前后缀</span><br><span class="line">        &#125;</span><br><span class="line">        char []s2 = haystack.toCharArray();</span><br><span class="line">        j=0;</span><br><span class="line">        for(int i=0;i&lt;len2;i++)&#123;</span><br><span class="line">            while(j&gt;0&amp;&amp;s2[i]!=s1[j])j=next[j-1];//j是模式串</span><br><span class="line">            if(s2[i]==s1[j])j++;</span><br><span class="line">            if(j==len1)return i-len1+1;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ol></li></ol><h4 id="7、重复的子字符串">7、重复的子字符串</h4><p><a href="https://leetcode.cn/problems/repeated-substring-pattern/">重复的子字符串</a></p><p>法一：</p><ul><li>匹配字符串，如果s由重复字符串组成，那么两个s拼接，掐头去尾</li><li>中间还会有s字符串，用contain即可</li><li>理由：上一个重复子串的后缀和下一个重复子串的前缀必能再组成一个<code>s</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">repeatedSubstringPattern</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        String ss=s.substring(<span class="number">1</span>,s.length())+s.substring(<span class="number">0</span>,s.length()-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(ss.contains(s))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：</p><ul><li><p>KMP，在由重复子串组成的字符串中，最长相等前后缀不包含的子串就是最小重复子串，</p></li><li><p>求出最小重复子串的长度，如果<strong>该长度不为0</strong>并且能被s的长度整除，则可由最小重复字符串组成s。</p></li><li><p>最小重复子串的长度=s的长度-最长相等前后缀的长度</p></li></ul><p>如下图：ab在前缀的最后和后缀的最前都有不包含的情况，所以ab是最小重复字符串</p><img src="/posts/fc81fbfd/202310292200957.png" class="" title="image-20231014104930655"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len-(next[len-<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(next[len-<span class="number">1</span>]&gt;<span class="number">0</span>&amp;&amp;len%(len-(next[len-<span class="number">1</span>]))==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h4 id="8、总结">8、总结</h4><p>注意库函数的时间复杂度，否则面试时用了库函数分析不出时间复杂度就寄了。</p><p>比如：使用for循环里调用库函数erase来移除元素，这其实是O(n^2)的操作，因为erase就是O(n)的操作</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>散列表</title>
      <link href="/posts/916e10bc.html"/>
      <url>/posts/916e10bc.html</url>
      
        <content type="html"><![CDATA[<h3 id="三、散列表">三、散列表</h3><h4 id="1-有效的字母异词位">1.有效的字母异词位</h4><ol><li><p>字符有重复，要两边重复次数相同</p></li><li><p>java没有unorderset，只能用map将就</p></li><li><p>map的get得到的value是右值，没有地址，不能自增，也就是进行++操作，只能进行+1操作</p></li><li><pre><code class="language-java">map.getOrDefault(c,0)+1<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 2.两个数组的交集</span><br><span class="line"></span><br><span class="line">1. 输出结果每个元素唯一，用set</span><br><span class="line"></span><br><span class="line">2. set怎么转数组</span><br><span class="line"></span><br><span class="line">   ```java</span><br><span class="line">   set2.stream().mapToInt(x -&gt; x).toArray();</span><br></pre></td></tr></table></figure></code></pre></li></ol><h4 id="3-快乐数">3.快乐数</h4><ol><li>对每个位置上的数字求平方，再求和，会导致无限循环，这意味着和重复出现！用set判断循环终止</li></ol><h4 id="4-两数之和">4.两数之和</h4><ol><li><p>用map的value记录下标</p></li><li><p>在return的时候直接创建数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span> []&#123;i,x.get(target-nums[i])&#125;;</span><br></pre></td></tr></table></figure></li></ol><h4 id="5-四数相加-II">5.<a href="https://leetcode.cn/problems/4sum-ii/">四数相加 II</a></h4><p>思路：</p><ol><li><p>给定四个数组，先遍历前两个求和，再遍历后两个，转成两数之和求解</p></li><li><p>用map.getOrDefault，在没找到另一半时返回默认value，0。</p></li><li><p>如果找得到，那么res加的就是前面所有求和等于（0-i-j）的情况，不需要对value–。</p><p>除非你想一个一个加，多此一举。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res+=map.getOrDefault(<span class="number">0</span>-i-j,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li></ol><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">        HashMap &lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:nums2)&#123;</span><br><span class="line">                <span class="comment">//getOrDefault获取key对应value，找不到给默认值，也就是第二个参数0</span></span><br><span class="line">                <span class="comment">//有-2+1和1+(-2)的可能</span></span><br><span class="line">                map.put(i+j,map.getOrDefault(i+j,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums3)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:nums4)&#123;</span><br><span class="line">                res+=map.getOrDefault(<span class="number">0</span>-i-j,<span class="number">0</span>);<span class="comment">//看看map有没有另一半，没有加0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-三数之和-四数之和">6.<a href="https://leetcode.cn/problems/3sum/">三数之和</a>&amp;<a href="https://leetcode.cn/problems/4sum/">四数之和</a></h4><ol><li><p>可以转化为两数之和求解（去重条件不好记忆，不推荐）</p><ol><li><p>用hash的话跟双指针的区别在于，最后一个左指针的去重，是在if条件里，而不是在循环开始</p><p>并且是和j+1比。</p></li><li><p>原因是（比如三数之和），0 0 0</p><p>第一个左指针在第一个0，</p><p>刚开始，不管哪种方案，第二个左指针都在第二个0，此时set不含-first-second，需要插入。</p><p>如果第二个左指针的去重在循环开始位置，并且和j-1比较，那么第二个左指针会从第二个0直接跳出循环，不会再判断set是否含有third。</p><p>而如果第二个左指针在if条件里，并且和j+1比较，那么第二个左指针会从第二个0找到最后一个0，此时set包含third，判断成功。</p><p>也就是用set需要第二个左指针多判断一次。（很复杂吧。）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(set.contains(second))&#123;</span><br><span class="line">res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(first,second,third)));</span><br><span class="line"><span class="keyword">while</span>(j&lt;nums.length-<span class="number">1</span>&amp;&amp;nums[j]==nums[j+<span class="number">1</span>])j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最好用双指针求解。</p></li><li><p>模板如下</p><ol><li><p>先排序</p></li><li><p>可优化的地方：first+右边界几个数如果小于target，那就不用继续了，因为加上最大的几个数都达不到target。</p></li><li><p>去重的注意事项：比如111222333</p><p>用<code>if(first&gt;0&amp;&amp;nums[first]==nums[first-1])continue;</code></p><p>用<code>j-1</code>，那么当前在第二个2（不跑），会找到第一个3。</p><p>如果比较first+1，那就是假如当前在最后一个1，会找得是最后一个2。</p><p>那么second就会从first的下一个元素开始，也就是3，无法和first取相同元素</p><p>记住，三数之和组内元素是可以重复的，也就是first不可以重复，而second可以和first一样。</p><p>左指针要比较first-1。</p></li><li><p>而后面的元素也是一样的去重，直到最后一个元素（也就是右指针），才开始while移动右指针。</p></li><li><p><strong>右指针的初始化放在倒数第二个左指针循环之前</strong>（避免每次左指针移动重复初始化右指针）</p><p>更深的原因是，排序后，a+b+c=0，然后b右移，而c不用回到n-1，因为b变大了，比当前c大的数都不用再试了。</p></li><li><p>最后加法需要看数据量级，最好将和强制转化为long，否则小心越界。</p></li></ol></li></ol><p>三数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> first=<span class="number">0</span>;first&lt;n;first++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[first]&gt;<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(first&gt;<span class="number">0</span>&amp;&amp;nums[first]==nums[first-<span class="number">1</span>])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> third=n-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> second=first+<span class="number">1</span>;second&lt;n;second++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(second&gt;first+<span class="number">1</span>&amp;&amp;nums[second]==nums[second-<span class="number">1</span>])<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">while</span>(second&lt;third&amp;&amp;nums[first]+nums[second]+nums[third]&gt;<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    third--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(second==third)<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[first]+nums[second]+nums[third]==<span class="number">0</span>)&#123;</span><br><span class="line">                    res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(nums[first],nums[second],nums[third])));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> n=nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> first=<span class="number">0</span>;first&lt;n;first++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(first&gt;<span class="number">0</span>&amp;&amp;nums[first]==nums[first-<span class="number">1</span>])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> second=first+<span class="number">1</span>;second&lt;n;second++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(second&gt;first+<span class="number">1</span>&amp;&amp;nums[second]==nums[second-<span class="number">1</span>])<span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> last=n-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> third=second+<span class="number">1</span>;third&lt;n;third++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(third&gt;second+<span class="number">1</span>&amp;&amp;nums[third]==nums[third-<span class="number">1</span>])<span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">while</span>(third&lt;last</span><br><span class="line">                          &amp;&amp;(<span class="type">long</span>)nums[first]+nums[second]+nums[third]+nums[last]&gt;target)</span><br><span class="line">                    &#123;</span><br><span class="line">                        last--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(third==last)<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span>( (<span class="type">long</span>)</span><br><span class="line">                       nums[first]+nums[second]+nums[third]+nums[last]==target)&#123;</span><br><span class="line">                        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(</span><br><span class="line">                            nums[first],nums[second],nums[third],nums[last]</span><br><span class="line">                        )));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/posts/56705aa1.html"/>
      <url>/posts/56705aa1.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、数组">一、数组</h3><h4 id="1、二分查找">1、二分查找</h4><ol><li><p>防止left+right溢出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> middle = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="2、移除元素">2、移除元素</h4><p>双指针</p><ol><li>左指针等于val，右指针无脑覆盖并左移，直到左指针不等于val才可以右移。</li><li>优化，右指针不无脑覆盖，只在不等于val时覆盖。</li></ol><p>快慢指针</p><ol><li>移动fast，当fast不等于val，用fast覆盖slow，slow++。</li></ol><h4 id="3、有序数组的平方">3、有序数组的平方</h4><ol><li>类似合并排序，用双指针。</li></ol><h4 id="4、长度最小的子数组">4、长度最小的子数组</h4><ol><li>不同于：子数组和最大，本题的和是一定的，只求最短子数组，不用动态规划</li><li>用滑动窗口</li></ol><h4 id="5、螺旋矩阵Ⅱ">5、螺旋矩阵Ⅱ</h4><ol><li>模拟时循环区间的注意。</li><li>左闭右开，并且每次画圈，四个循环迭代次数是相同的</li><li>loop次数等于n/2，为奇数时单独处理中心。</li></ol><h4 id="6、旋转图像">6、<a href="https://leetcode.cn/problems/rotate-image/">旋转图像</a></h4><p>创维9.15笔试最后一题，没写出来，用了最傻逼的办法，我测</p><p>法一：使用辅助数组</p><img src="/posts/56705aa1/202311091042215.png" class="" title="ccw-01-07.001.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        matrix_new[j][n - i - <span class="number">1</span>] = matrix[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：不使用辅助数组</p><img src="/posts/56705aa1/202311091042216.png" class="" title="ccw-01-07.003.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; (n + <span class="number">1</span>) / <span class="number">2</span>; ++j) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> matrix[i][j];</span><br><span class="line">        matrix[i][j] = matrix[n - j - <span class="number">1</span>][i];</span><br><span class="line">        matrix[n - j - <span class="number">1</span>][i] = matrix[n - i - <span class="number">1</span>][n - j - <span class="number">1</span>];</span><br><span class="line">        matrix[n - i - <span class="number">1</span>][n - j - <span class="number">1</span>] = matrix[j][n - i - <span class="number">1</span>];</span><br><span class="line">        matrix[j][n - i - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旋转的不变量：</p><img src="/posts/56705aa1/202311091042217.png" class="" title="image-20230916110057332"><p>法三：翻转代替旋转</p><img src="/posts/56705aa1/202311091042219.png" class="" title="image-20230916103909197"><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="comment">//上下交换</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                swap(i,j,n-i-<span class="number">1</span>,j,matrix);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//my_print(n,matrix);</span></span><br><span class="line">        <span class="comment">//对角线交换</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                swap(i,j,j,i,matrix);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//my_print(n,matrix);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span>[][] matrix)</span>&#123;</span><br><span class="line">        matrix[i][j]^=matrix[x][y];</span><br><span class="line">        matrix[x][y]^=matrix[i][j];</span><br><span class="line">        matrix[i][j]^=matrix[x][y];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">my_print</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span>[][]matrix)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                System.out.print(matrix[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/posts/2362a8ea.html"/>
      <url>/posts/2362a8ea.html</url>
      
        <content type="html"><![CDATA[<h3 id="二、链表">二、链表</h3><h4 id="定义的模板：">定义的模板：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="comment">// 结点的值</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一个结点</span></span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(无参)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(有一个参数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(有两个参数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val, ListNode next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-反转链表系列">1.反转链表系列</h4><h5 id="1、反转链表">1、<a href="https://leetcode.cn/problems/reverse-linked-list/">反转链表</a></h5><ol><li>用tmp保存curr.next</li><li>pre初始值为null，相当于虚头节点，不需要处理pre的next，直接移动pre即可</li><li>while循环内只看curr是否为null</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LinkNode pre=<span class="literal">null</span>,tmp=<span class="literal">null</span>,curr=head;</span><br><span class="line"><span class="keyword">while</span> (curr!=<span class="literal">null</span>)&#123;</span><br><span class="line">tmp=curr.next;</span><br><span class="line">    curr.next=pre;</span><br><span class="line">    pre=curr;</span><br><span class="line">    curr=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure><img src="/posts/2362a8ea/202310292200949.png" class="" title="image-20230828102202398"><h5 id="2、反转链表-II">2、<a href="https://leetcode.cn/problems/reverse-linked-list-ii/">反转链表 II</a></h5><p>这题和上面的不同之处就在于局部反转</p><p>法一：头插法</p><p>细节很多</p><ol><li><p>pre节点不需要动</p></li><li><p>每次反转，是把nextNode反转到局部链表的头部！而不是把nextNode和curr两两反转</p><p>所以是：<code>tmp.next = pre.next;</code>，而不是<code>tmp.next = curr;</code>，和第一题区别</p><p>而当nextNode移动到最前面，curr在链表的位置便自动向后移动一步，所以不需要额外移动curr</p></li><li><p>每次反转，要把curr节点移到后面，所以是<code>curr.next = tmp.next;</code></p></li></ol><img src="/posts/2362a8ea/202310292200950.png" class="" title="image-20230828102240793"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseBetween</span><span class="params">(ListNode head, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>,head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;left-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            pre = pre.next; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> pre.next,tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;right-left;i++)&#123;</span><br><span class="line">            tmp = curr.next;<span class="comment">//记录curr的nextNode</span></span><br><span class="line">            curr.next = tmp.next;<span class="comment">//先记录next的next</span></span><br><span class="line">            tmp.next = pre.next;<span class="comment">//再修改next的next，注意这里不能指向curr</span></span><br><span class="line">            pre.next = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：穿针引线</p><p>就是利用反转链表Ⅰ的思路，先反转局部</p><p>然后把 pre的 next 指针指向反转以后的链表头节点，把反转以后的链表的尾节点的next 指针指向curr。</p><img src="/posts/2362a8ea/202310292200951.png" class="" title="image-20230828102647535"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseBetween</span><span class="params">(ListNode head, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">//必须要用dummy！否则单个节点pre.next为null，curr = rightNdoe.next就不存在了！</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>,head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;left-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            pre = pre.next; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">leftNode</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">rightNdoe</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;right-left;i++)&#123;</span><br><span class="line">            rightNdoe = rightNdoe.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> rightNdoe.next;</span><br><span class="line">        rightNdoe.next = <span class="literal">null</span>;<span class="comment">//局部链表反转终止条件</span></span><br><span class="line">        reverseList(leftNode);<span class="comment">//反转后leftNode为局部链表的尾部</span></span><br><span class="line">        pre.next = rightNdoe;</span><br><span class="line">        leftNode.next = curr;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>)<span class="keyword">return</span> ;</span><br><span class="line">        ListNode pre=<span class="literal">null</span>,curr=head,tmp=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(curr!=<span class="literal">null</span>)&#123;</span><br><span class="line">            tmp = curr.next;</span><br><span class="line">            curr.next = pre;</span><br><span class="line">            pre = curr;</span><br><span class="line">            curr = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、两两交换链表中的节点">3、<a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">两两交换链表中的节点</a></h5><p>使用的是第二题第二种思路的简化版、10.13、8min</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span> (-<span class="number">1</span>,head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> head;</span><br><span class="line">        ListNode tmp;</span><br><span class="line">        <span class="keyword">while</span>(curr!=<span class="literal">null</span>&amp;&amp;curr.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            tmp = curr.next;</span><br><span class="line">            curr.next = tmp.next;<span class="comment">//修改局部反转后链表的尾节点指向</span></span><br><span class="line">            tmp.next = curr;<span class="comment">//局部反转</span></span><br><span class="line">            pre.next = tmp;<span class="comment">//pre指向反转后局部链表的头节点</span></span><br><span class="line">            pre = curr;<span class="comment">//移动，进行下一步反转</span></span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、K-个一组翻转链表">4、<a href="https://leetcode.cn/problems/reverse-nodes-in-k-group/">K 个一组翻转链表</a></h5><p>这个使用第二题的第一种思路：</p><ul><li>只有一个节点不需要反转，所以<code>j</code>从1开始</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseKGroup</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span> (-<span class="number">1</span>,head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(curr!=<span class="literal">null</span>)&#123;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> len/k;<span class="comment">//向下取整，最后不足k个不反转</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy,tmp;</span><br><span class="line">        curr = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="comment">// 只有一个节点不需要反转，所以j从1开始</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;k;j++)&#123;</span><br><span class="line">                tmp = curr.next;<span class="comment">//至少有两个节点才能进循环，所以curr.next一定存在</span></span><br><span class="line">                curr.next = tmp.next;<span class="comment">//向后移curr的预处理</span></span><br><span class="line">                <span class="comment">// 把tmp移到局部链表的头</span></span><br><span class="line">                tmp.next = pre.next;</span><br><span class="line">                pre.next = tmp;</span><br><span class="line">                <span class="comment">// 移动tmp完毕，curr的位置就会自动向后移动一位，不需要额外移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            pre = curr;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他妈的，链表反转算是会了吧！一定要会阿🤢！</p><h4 id="2-双指针系列：">2.双指针系列：</h4><h5 id="1-旋转链表">1.<a href="https://leetcode.cn/problems/rotate-list/">旋转链表</a></h5><p>要求：将链表每个节点向右移动 k 个位置。</p><img src="/posts/2362a8ea/202310292200952.png" class="" title="image-20230828115531419"><p>法一：链表反转（遍历两遍）</p><p>将整个链表反转变成{5,4,3,2,1}，然后再将前K和N-K两个部分分别反转。</p><p>也就是分别变成了{4,5}和{1,2,3},这样就轻松解决了。</p><p>法二：双指针（遍历一遍）</p><p>先用双指针策略找到倒数K的位置，也就是{1,2,3]和{4,5}两个序列，之后再将两个链表拼接成{4,5,1,2,3}就行了。</p><img src="/posts/2362a8ea/202310292200953.png" class="" title="image-20230828120611680"><h5 id="2-删除链表倒数第N个节点">2.删除链表倒数第N个节点</h5><p>快慢指针，快指针先走N步，然后快慢同时走，当快指针为null时，慢指针到达应删节点的pre。</p><h5 id="3-链表相交">3.链表相交</h5><p>双指针法</p><p>先求链表长度，然后移动较长head使两链表剩下的部分等长，再同时移动两head直到两头相等就找到交点了</p><h5 id="4-环形链表系列">4.环形链表系列</h5><p>快慢指针，快走两步，慢走一步，两者遇上时（有环）：<a href="https://leetcode.cn/problems/linked-list-cycle/">环形链表</a></p><p>然后慢指针从头和快指针一步一步走，直到二者相等即是环形入口：<a href="https://leetcode.cn/problems/linked-list-cycle-ii/">环形链表 II</a></p><p>环形链表的应用：<a href="https://leetcode.cn/problems/find-the-duplicate-number/">寻找重复数</a></p><p>如何将数组扩展成链表问题？（不会就先构造链表吧😂）</p><ul><li>将nums[index]看作是链表的节点</li><li>将index看作是节点中的next指针</li></ul><img src="/posts/2362a8ea/202310292200954.png" class="" title="image-20230828112027780"><img src="/posts/2362a8ea/202310292200955.png" class="" title="image-20230828112039417"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findDuplicate</span><span class="params">( <span class="type">int</span>[ ] nums)</span> &#123;<span class="comment">//如 nums = [1,3,4,2,2]</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    slow = nums[slow];<span class="comment">//初始节点为1</span></span><br><span class="line">    fast = nums[nums[fast]];<span class="comment">//初始节点为nums[1]=3</span></span><br><span class="line">    <span class="comment">// 找环，题目说一定有且只有一个重复数</span></span><br><span class="line">    <span class="keyword">while</span> ( slow != fast) &#123;</span><br><span class="line">         <span class="comment">// sLow = sLow.next;</span></span><br><span class="line">        slow = nums [slow];</span><br><span class="line">        <span class="comment">// fast = fast.next.next;</span></span><br><span class="line">        fast = nums [nums[fast]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找重复数入口：sLow回到初始位置，fast在相遇的位置</span></span><br><span class="line">    slow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">        slow = nums[ slow];</span><br><span class="line">        fast = nums[fast];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-回文链表">6.<a href="https://leetcode.cn/problems/palindrome-linked-list/">回文链表</a></h5><p>法一：</p><p>涉及：快慢指针分割链表（找中点），反转链表，链表的比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span>&amp;&amp;fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            pre = slow;</span><br><span class="line">            fast = fast.next.next;<span class="comment">//快走两步</span></span><br><span class="line">            slow = slow.next;<span class="comment">//慢走一步</span></span><br><span class="line">        &#125;</span><br><span class="line">        pre.next = <span class="literal">null</span>;<span class="comment">//别忘了分割链表！</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">link1</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">link2</span> <span class="operator">=</span> slow;</span><br><span class="line">        <span class="comment">//print(link1);</span></span><br><span class="line">        <span class="comment">//print(link2);</span></span><br><span class="line">        link2 = reverse(link2);</span><br><span class="line">        <span class="comment">//print(link2);</span></span><br><span class="line">        <span class="comment">//分割链表后，两链表要么长度相等，要么后面比前面多一个节点，所以while可以判断短那条</span></span><br><span class="line">        <span class="keyword">while</span>(link1!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//不能直接比较link1和link2，因为它们是同一链表上不同节点！只是值相等而已</span></span><br><span class="line">            <span class="keyword">if</span>(link1.val==link2.val)&#123;</span><br><span class="line">                link1 = link1.next;</span><br><span class="line">                link2 = link2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">        ListNode pre=<span class="literal">null</span>,curr=head,tmp;</span><br><span class="line">        <span class="keyword">while</span>(curr!=<span class="literal">null</span>)&#123;</span><br><span class="line">            tmp = curr.next;</span><br><span class="line">            curr.next = pre;</span><br><span class="line">            pre = curr;</span><br><span class="line">            curr = tmp;<span class="comment">//别curr = curr.next，因为curr.next已经变成pre了！</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(tmp!=<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.print(tmp.val);</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：把链表节点丢到<code>ArrayList</code>，然后就可以双指针了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        List&lt;ListNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(curr!=<span class="literal">null</span>)&#123;</span><br><span class="line">            list.add(curr);</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> list.size()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(list.get(i).val!=list.get(j).val)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度分析：都是O(n)，但下面这个更慢，不知道为啥。</p><p>空间复杂度：下面O(n)，上面O(1)</p><h5 id="7-删除链表重复元素">7.删除链表重复元素</h5><p>删除到只剩一个：<a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/">删除排序链表中的重复元素</a></p><p>1、快慢指针，慢指针和快指针相同，删快指针所在节点，只有快指针移动，不相同，两指针同时移动一步</p><p>2、用set存出现过的元素，然后删重复的即可</p><p>把重复元素全删除：<a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/">删除排序链表中的重复元素 II</a></p><p>和上题的区别是：</p><ul><li>头节点可能都被删除，所以一定要用dummy</li><li><code>curr.next.next</code>可能为空，而我们需要获取它的值，所以需要对它进行判空处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head ) ;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> dummy ;</span><br><span class="line">    <span class="keyword">while</span>(curr.next != <span class="literal">null</span> &amp;&amp; curr.next.next != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果存在重复的节点</span></span><br><span class="line">        <span class="keyword">if</span>( curr.next.val == curr.next.next.val)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmpVal</span> <span class="operator">=</span> curr.next.val;</span><br><span class="line">            <span class="comment">//持续的删除(将等于tmpVaL的节点都删除，包括自己)</span></span><br><span class="line">            <span class="keyword">while</span>(curr.next != <span class="literal">null</span> &amp;&amp; curr.next.val == tmpVal)&#123;</span><br><span class="line">                <span class="comment">//此处curr相当于pre，curr.next就是要删除的当前节点</span></span><br><span class="line">                curr.next = curr.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            curr = curr .next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy .next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-链表排序">3.链表排序</h4><h5 id="5-重排链表">5.<a href="https://leetcode.cn/problems/reorder-list/">重排链表</a></h5><p>使用双端队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reorderList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        Deque&lt;ListNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();<span class="comment">//记一下双端队列的名字Deque！</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> head;<span class="comment">//头节点不用入栈，避免重复</span></span><br><span class="line">        <span class="keyword">while</span>(curr.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            queue.offer(curr.next);</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//偶数队列尾出栈，因为队列先进先出，所以链表尾在队列尾</span></span><br><span class="line">                curr.next = queue.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                curr.next = queue.poll();<span class="comment">//奇数队列头出栈</span></span><br><span class="line">            &#125;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        curr.next = <span class="literal">null</span>;<span class="comment">//别忘了处理最后！否则成环！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-排序链表">8.<a href="https://leetcode.cn/problems/sort-list/">排序链表</a>(!)</h5><p>要求O(1)空间复杂度（最难），O(nlogn)时间复杂度，只能修改next，不能修改val</p><p>下面是没那么多要求的做法，最方便！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">sortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;ListNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">            list.add(head);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(list,(a,b)-&gt; a.val-b.val);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size()-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            list.get(i).next = list.get(i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        list.get(list.size()-<span class="number">1</span>).next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一版：</span></span><br><span class="line">Collections.sort(list,(ListNode a,ListNode b)-&gt;&#123;<span class="keyword">return</span> a.val-b.val;&#125;);</span><br><span class="line"><span class="comment">//返回值和参数类型都可以简化，第二版如下：</span></span><br><span class="line">Collections.sort(list,(a,b)-&gt; a.val-b.val);</span><br><span class="line"><span class="comment">//idea直接把我的全换了😂，第三版如下：</span></span><br><span class="line">list.sort(Comparator.comparingInt((ListNode a) -&gt; a.val));</span><br><span class="line"><span class="comment">//或者最原始的使用内部类：</span></span><br><span class="line">list.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;ListNode&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(ListNode o1, ListNode o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.val - o2.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>链表最适合的是归并排序！最容易想到的实现方式是自顶向下的递归实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">sortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sortList(head, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">sortList</span><span class="params">(ListNode head, ListNode tail)</span> &#123;</span><br><span class="line">        <span class="comment">//当链表为空或者链表只包含 1 个节点时，递归中止</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head.next == tail) &#123;</span><br><span class="line">            head.next = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找中点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head, fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != tail) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            <span class="keyword">if</span> (fast != tail) &#123;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">mid</span> <span class="operator">=</span> slow;</span><br><span class="line">        <span class="comment">//对两个子链表排序</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">list1</span> <span class="operator">=</span> sortList(head, mid);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">list2</span> <span class="operator">=</span> sortList(mid, tail);</span><br><span class="line">        <span class="comment">// 合并</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">sorted</span> <span class="operator">=</span> merge(list1, list2);</span><br><span class="line">        <span class="keyword">return</span> sorted;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 使用非递归来合并</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">merge</span><span class="params">(ListNode head1, ListNode head2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> dummyHead, temp1 = head1, temp2 = head2;</span><br><span class="line">        <span class="keyword">while</span> (temp1 != <span class="literal">null</span> &amp;&amp; temp2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp1.val &lt;= temp2.val) &#123;</span><br><span class="line">                temp.next = temp1;</span><br><span class="line">                temp1 = temp1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp.next = temp2;</span><br><span class="line">                temp2 = temp2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp1 != <span class="literal">null</span>) &#123;</span><br><span class="line">            temp.next = temp1;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            temp.next = temp2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用递归来合并</span></span><br><span class="line">    ListNode <span class="title function_">mergeSortedList</span><span class="params">(ListNode head1, ListNode head2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!head1 || !head2) <span class="keyword">return</span> head1 ? head1 : head2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head1.val &lt; head2.val) &#123;</span><br><span class="line">            head1.next = mergeSortedList(head1.next, head2);</span><br><span class="line">            <span class="keyword">return</span> head1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head2.next = mergeSortedList(head1, head2.next);</span><br><span class="line">            <span class="keyword">return</span> head2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑到递归调用的栈空间，自顶向下归并排序的空间复杂度是 O(log⁡n)。如果要达到 O(1) 的空间复杂度，则需要使用自底向上的实现方式。这个…看之前学校算法课吧，当年我搞得很懂。</p><p>下面是力扣上的解释，也不是不能看懂，但是背起来就很烦了，滚😂</p><img src="/posts/2362a8ea/202310292200956.png" class="" title="image-20230826232704906"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">sortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首先求得链表的长度 length</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        <span class="comment">//用 subLength 表示每次需要排序的子链表的长度，初始时 subLength 为1</span></span><br><span class="line">        <span class="comment">//分步为1两两合并</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">subLength</span> <span class="operator">=</span> <span class="number">1</span>; subLength &lt; length; subLength &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> dummyHead, curr = dummyHead.next;</span><br><span class="line">            <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">head1</span> <span class="operator">=</span> curr;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; subLength &amp;&amp; curr.next != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">                    curr = curr.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">head2</span> <span class="operator">=</span> curr.next;</span><br><span class="line">                curr.next = <span class="literal">null</span>;</span><br><span class="line">                curr = head2;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; subLength &amp;&amp; curr != <span class="literal">null</span> &amp;&amp; curr.next != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">                    curr = curr.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">                    next = curr.next;</span><br><span class="line">                    curr.next = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">merged</span> <span class="operator">=</span> merge(head1, head2);</span><br><span class="line">                prev.next = merged;</span><br><span class="line">                <span class="keyword">while</span> (prev.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                    prev = prev.next;</span><br><span class="line">                &#125;</span><br><span class="line">                curr = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 合并和之前一样</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">merge</span><span class="params">(ListNode head1, ListNode head2)</span> &#123;</span><br><span class="line"><span class="comment">//略...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
